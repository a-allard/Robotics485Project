# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pixy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pixy')
    _pixy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pixy', [dirname(__file__)])
        except ImportError:
            import _pixy
            return _pixy
        try:
            _mod = imp.load_module('_pixy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pixy = swig_import_helper()
    del swig_import_helper
else:
    import _pixy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class BlockArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pixy.new_BlockArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pixy.delete_BlockArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pixy.BlockArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pixy.BlockArray___setitem__(self, index, value)

    def cast(self):
        return _pixy.BlockArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_pixy.BlockArray_frompointer)
    else:
        frompointer = _pixy.BlockArray_frompointer
BlockArray_swigregister = _pixy.BlockArray_swigregister
BlockArray_swigregister(BlockArray)

def BlockArray_frompointer(t):
    return _pixy.BlockArray_frompointer(t)
BlockArray_frompointer = _pixy.BlockArray_frompointer

class responceBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, responceBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, responceBlock, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pixy.new_responceBlock(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pixy.delete_responceBlock
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pixy.responceBlock___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pixy.responceBlock___setitem__(self, index, value)

    def cast(self):
        return _pixy.responceBlock_cast(self)
    if _newclass:
        frompointer = staticmethod(_pixy.responceBlock_frompointer)
    else:
        frompointer = _pixy.responceBlock_frompointer
responceBlock_swigregister = _pixy.responceBlock_swigregister
responceBlock_swigregister(responceBlock)

def responceBlock_frompointer(t):
    return _pixy.responceBlock_frompointer(t)
responceBlock_frompointer = _pixy.responceBlock_frompointer


def pixy_init():
    return _pixy.pixy_init()
pixy_init = _pixy.pixy_init

def pixy_get_blocks(max_blocks, blocks):
    return _pixy.pixy_get_blocks(max_blocks, blocks)
pixy_get_blocks = _pixy.pixy_get_blocks

def pixy_command(name):
    return _pixy.pixy_command(name)
pixy_command = _pixy.pixy_command

def pixy_close():
    return _pixy.pixy_close()
pixy_close = _pixy.pixy_close

def pixy_error(error_code):
    return _pixy.pixy_error(error_code)
pixy_error = _pixy.pixy_error

def pixy_led_set_RGB(red, green, blue):
    return _pixy.pixy_led_set_RGB(red, green, blue)
pixy_led_set_RGB = _pixy.pixy_led_set_RGB

def pixy_led_set_max_current(current):
    return _pixy.pixy_led_set_max_current(current)
pixy_led_set_max_current = _pixy.pixy_led_set_max_current

def pixy_led_get_max_current():
    return _pixy.pixy_led_get_max_current()
pixy_led_get_max_current = _pixy.pixy_led_get_max_current

def pixy_cam_set_auto_white_balance(value):
    return _pixy.pixy_cam_set_auto_white_balance(value)
pixy_cam_set_auto_white_balance = _pixy.pixy_cam_set_auto_white_balance

def pixy_cam_get_auto_white_balance():
    return _pixy.pixy_cam_get_auto_white_balance()
pixy_cam_get_auto_white_balance = _pixy.pixy_cam_get_auto_white_balance

def pixy_cam_get_white_balance_value():
    return _pixy.pixy_cam_get_white_balance_value()
pixy_cam_get_white_balance_value = _pixy.pixy_cam_get_white_balance_value

def pixy_cam_set_white_balance_value(red, green, blue):
    return _pixy.pixy_cam_set_white_balance_value(red, green, blue)
pixy_cam_set_white_balance_value = _pixy.pixy_cam_set_white_balance_value

def pixy_cam_set_auto_exposure_compensation(enable):
    return _pixy.pixy_cam_set_auto_exposure_compensation(enable)
pixy_cam_set_auto_exposure_compensation = _pixy.pixy_cam_set_auto_exposure_compensation

def pixy_cam_get_auto_exposure_compensation():
    return _pixy.pixy_cam_get_auto_exposure_compensation()
pixy_cam_get_auto_exposure_compensation = _pixy.pixy_cam_get_auto_exposure_compensation

def pixy_cam_set_exposure_compensation(gain, compensation):
    return _pixy.pixy_cam_set_exposure_compensation(gain, compensation)
pixy_cam_set_exposure_compensation = _pixy.pixy_cam_set_exposure_compensation

def pixy_cam_set_brightness(brightness):
    return _pixy.pixy_cam_set_brightness(brightness)
pixy_cam_set_brightness = _pixy.pixy_cam_set_brightness

def pixy_cam_get_brightness():
    return _pixy.pixy_cam_get_brightness()
pixy_cam_get_brightness = _pixy.pixy_cam_get_brightness

def pixy_rcs_set_position(channel, position):
    return _pixy.pixy_rcs_set_position(channel, position)
pixy_rcs_set_position = _pixy.pixy_rcs_set_position

def pixy_rcs_set_frequency(frequency):
    return _pixy.pixy_rcs_set_frequency(frequency)
pixy_rcs_set_frequency = _pixy.pixy_rcs_set_frequency

def pixy_get_firmware_version(major, minor, build):
    return _pixy.pixy_get_firmware_version(major, minor, build)
pixy_get_firmware_version = _pixy.pixy_get_firmware_version

def pixy_stop():
    return _pixy.pixy_stop()
pixy_stop = _pixy.pixy_stop

def pixy_run():
    return _pixy.pixy_run()
pixy_run = _pixy.pixy_run

def pixy_getImage(blk, mode, xOffset, yOffset, width, height):
    return _pixy.pixy_getImage(blk, mode, xOffset, yOffset, width, height)
pixy_getImage = _pixy.pixy_getImage

def getChar(arg1, index):
    return _pixy.getChar(arg1, index)
getChar = _pixy.getChar
class Block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pixy.Block_type_set
    __swig_getmethods__["type"] = _pixy.Block_type_get
    if _newclass:
        type = _swig_property(_pixy.Block_type_get, _pixy.Block_type_set)
    __swig_setmethods__["signature"] = _pixy.Block_signature_set
    __swig_getmethods__["signature"] = _pixy.Block_signature_get
    if _newclass:
        signature = _swig_property(_pixy.Block_signature_get, _pixy.Block_signature_set)
    __swig_setmethods__["x"] = _pixy.Block_x_set
    __swig_getmethods__["x"] = _pixy.Block_x_get
    if _newclass:
        x = _swig_property(_pixy.Block_x_get, _pixy.Block_x_set)
    __swig_setmethods__["y"] = _pixy.Block_y_set
    __swig_getmethods__["y"] = _pixy.Block_y_get
    if _newclass:
        y = _swig_property(_pixy.Block_y_get, _pixy.Block_y_set)
    __swig_setmethods__["width"] = _pixy.Block_width_set
    __swig_getmethods__["width"] = _pixy.Block_width_get
    if _newclass:
        width = _swig_property(_pixy.Block_width_get, _pixy.Block_width_set)
    __swig_setmethods__["height"] = _pixy.Block_height_set
    __swig_getmethods__["height"] = _pixy.Block_height_get
    if _newclass:
        height = _swig_property(_pixy.Block_height_get, _pixy.Block_height_set)
    __swig_setmethods__["angle"] = _pixy.Block_angle_set
    __swig_getmethods__["angle"] = _pixy.Block_angle_get
    if _newclass:
        angle = _swig_property(_pixy.Block_angle_get, _pixy.Block_angle_set)

    def __init__(self):
        this = _pixy.new_Block()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pixy.delete_Block
    __del__ = lambda self: None
Block_swigregister = _pixy.Block_swigregister
Block_swigregister(Block)

class rBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pixels"] = _pixy.rBlock_pixels_set
    __swig_getmethods__["pixels"] = _pixy.rBlock_pixels_get
    if _newclass:
        pixels = _swig_property(_pixy.rBlock_pixels_get, _pixy.rBlock_pixels_set)
    __swig_setmethods__["response"] = _pixy.rBlock_response_set
    __swig_getmethods__["response"] = _pixy.rBlock_response_get
    if _newclass:
        response = _swig_property(_pixy.rBlock_response_get, _pixy.rBlock_response_set)
    __swig_setmethods__["fourcc"] = _pixy.rBlock_fourcc_set
    __swig_getmethods__["fourcc"] = _pixy.rBlock_fourcc_get
    if _newclass:
        fourcc = _swig_property(_pixy.rBlock_fourcc_get, _pixy.rBlock_fourcc_set)
    __swig_setmethods__["renderflags"] = _pixy.rBlock_renderflags_set
    __swig_getmethods__["renderflags"] = _pixy.rBlock_renderflags_get
    if _newclass:
        renderflags = _swig_property(_pixy.rBlock_renderflags_get, _pixy.rBlock_renderflags_set)
    __swig_setmethods__["rwidth"] = _pixy.rBlock_rwidth_set
    __swig_getmethods__["rwidth"] = _pixy.rBlock_rwidth_get
    if _newclass:
        rwidth = _swig_property(_pixy.rBlock_rwidth_get, _pixy.rBlock_rwidth_set)
    __swig_setmethods__["rheight"] = _pixy.rBlock_rheight_set
    __swig_getmethods__["rheight"] = _pixy.rBlock_rheight_get
    if _newclass:
        rheight = _swig_property(_pixy.rBlock_rheight_get, _pixy.rBlock_rheight_set)
    __swig_setmethods__["numPixels"] = _pixy.rBlock_numPixels_set
    __swig_getmethods__["numPixels"] = _pixy.rBlock_numPixels_get
    if _newclass:
        numPixels = _swig_property(_pixy.rBlock_numPixels_get, _pixy.rBlock_numPixels_set)

    def __init__(self):
        this = _pixy.new_rBlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pixy.delete_rBlock
    __del__ = lambda self: None
rBlock_swigregister = _pixy.rBlock_swigregister
rBlock_swigregister(rBlock)

# This file is compatible with both classic and new-style classes.


